from operator import contains
import pytest 
from red_exploit_fixtures import cyborg, params, obs_failure, red_killchain, prioritised_killchain, HOSTNAMES
import itertools 
from CybORG.Shared.Actions import SQLInjection, DropFile
from CybORG.Shared.Enums import SessionType, OperatingSystemType, ProcessType, ProcessState
from CybORG.Tests.EphemeralPort import Win2008EphemeralPort, LinuxEphemeralPort

@pytest.mark.parametrize('parameter', ['session','agent','target_session'])
def test_DropFile_junk_input(prioritised_killchain,cyborg,params,parameter):
    # Here we make sure the action handles junk inputs properly.
    red_killchain = prioritised_killchain(cyborg,HOSTNAMES,priority=SQLInjection)
    cyborg = red_killchain['cyborg']
    params[parameter] = 'Junk'
    action = DropFile(**params)
    _ = cyborg.step(action=action,agent='Red')
    last_action = cyborg.get_last_action('Red')

    assert 'Invalid' in last_action.__class__.__name__

@pytest.mark.parametrize('host',HOSTNAMES)
def test_DropFile_initial_state(cyborg, params, obs_failure, host):
    # Here we test the actions out from the initial state.
    ip = cyborg.get_ip_map()[host]
    action = SQLInjection(ip_address=ip,**params)
    results = cyborg.step(action=action,agent='Red')

    assert results.observation == obs_failure

@pytest.mark.parametrize('host',HOSTNAMES)
def test_DropFile_file_location(cyborg, params, obs_failure, host):
    ip = cyborg.get_ip_map()[host]
    action = DropFile(**params)
    results = cyborg.step(action=action,agent='Red')

    assert results.observation == True
